<?xml version="1.0"?>
<analyzerinfo checksum="3669265514">
        <error id="redundantAssignment" severity="style" msg="Variable &apos;result&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;result&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="/home/xhermit/dev/prj/work/nixplot/src/config.c" line="107"/>
            <location file="/home/xhermit/dev/prj/work/nixplot/src/config.c" line="104"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/xhermit/dev/prj/work/nixplot/src/config.c" line="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/xhermit/dev/prj/work/nixplot/src/config.c" line="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;def&apos; can be reduced." verbose="The scope of the variable &apos;def&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/xhermit/dev/prj/work/nixplot/src/config.c" line="52"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;strparm&apos; can be reduced." verbose="The scope of the variable &apos;strparm&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/xhermit/dev/prj/work/nixplot/src/config.c" line="53"/>
        </error>
  <FileInfo check="Bounds checking">
    <ArraySize array="CfgFileName" size="12"/>
    <ArraySize array="CfgPath" size="9"/>
    <ArraySize array="config_strings" size="1"/>
  </FileInfo>
        <error id="invalidscanf" severity="warning" msg="fscanf() without field width limits can crash with huge input data." verbose="fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    char c[5];\012    scanf(&quot;%s&quot;, c);\012    return 0;\012}\012\012Typing in 5 or more characters may make the program crash. The correct usage here is &apos;scanf(&quot;%4s&quot;, c);&apos;, as the maximum field width does not include the terminating null byte.\012Source: http://linux.die.net/man/3/scanf\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c" cwe="119">
            <location file="/home/xhermit/dev/prj/work/nixplot/src/config.c" line="63"/>
        </error>
  <FileInfo check="Bounds checking">
    <ArraySize array="CfgFileName" size="12"/>
    <ArraySize array="CfgPath" size="9"/>
    <ArraySize array="config_strings" size="1"/>
  </FileInfo>
  <FileInfo check="Bounds checking">
    <ArraySize array="CfgFileName" size="12"/>
    <ArraySize array="CfgPath" size="9"/>
    <ArraySize array="config_strings" size="1"/>
  </FileInfo>
  <FileInfo check="Bounds checking">
    <ArraySize array="CfgFileName" size="12"/>
    <ArraySize array="CfgPath" size="9"/>
    <ArraySize array="config_strings" size="1"/>
  </FileInfo>
  <FileInfo check="Bounds checking">
    <ArraySize array="CfgFileName" size="12"/>
    <ArraySize array="CfgPath" size="9"/>
    <ArraySize array="config_strings" size="1"/>
  </FileInfo>
  <FileInfo check="Bounds checking">
    <ArraySize array="CfgFileName" size="12"/>
    <ArraySize array="CfgPath" size="9"/>
    <ArraySize array="config_strings" size="1"/>
  </FileInfo>
  <FileInfo check="Bounds checking">
    <ArraySize array="CfgFileName" size="12"/>
    <ArraySize array="CfgPath" size="9"/>
    <ArraySize array="config_strings" size="1"/>
  </FileInfo>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="saveConfig" lineNumber="23"/>
    <functiondecl functionName="loadConfig" lineNumber="47"/>
    <functiondecl functionName="getCfgPath" lineNumber="102"/>
    <functiondecl functionName="createCfgPath" lineNumber="124"/>
    <functiondecl functionName="getCfgFileName" lineNumber="145"/>
    <functiondecl functionName="saveConfig" lineNumber="23"/>
    <functiondecl functionName="loadConfig" lineNumber="47"/>
    <functiondecl functionName="getCfgPath" lineNumber="102"/>
    <functiondecl functionName="createCfgPath" lineNumber="124"/>
    <functiondecl functionName="getCfgFileName" lineNumber="145"/>
    <functiondecl functionName="saveConfig" lineNumber="23"/>
    <functiondecl functionName="loadConfig" lineNumber="47"/>
    <functiondecl functionName="getCfgPath" lineNumber="102"/>
    <functiondecl functionName="createCfgPath" lineNumber="124"/>
    <functiondecl functionName="getCfgFileName" lineNumber="145"/>
    <functiondecl functionName="saveConfig" lineNumber="23"/>
    <functiondecl functionName="loadConfig" lineNumber="47"/>
    <functiondecl functionName="getCfgPath" lineNumber="102"/>
    <functiondecl functionName="createCfgPath" lineNumber="124"/>
    <functiondecl functionName="getCfgFileName" lineNumber="145"/>
    <functiondecl functionName="saveConfig" lineNumber="23"/>
    <functiondecl functionName="loadConfig" lineNumber="47"/>
    <functiondecl functionName="getCfgPath" lineNumber="102"/>
    <functiondecl functionName="createCfgPath" lineNumber="124"/>
    <functiondecl functionName="getCfgFileName" lineNumber="145"/>
    <functiondecl functionName="saveConfig" lineNumber="23"/>
    <functiondecl functionName="loadConfig" lineNumber="47"/>
    <functiondecl functionName="getCfgPath" lineNumber="102"/>
    <functiondecl functionName="createCfgPath" lineNumber="124"/>
    <functiondecl functionName="getCfgFileName" lineNumber="145"/>
    <functiondecl functionName="saveConfig" lineNumber="23"/>
    <functiondecl functionName="loadConfig" lineNumber="47"/>
    <functiondecl functionName="getCfgPath" lineNumber="102"/>
    <functiondecl functionName="createCfgPath" lineNumber="124"/>
    <functiondecl functionName="getCfgFileName" lineNumber="145"/>
    <functioncall functionName="BOOL"/>
    <functioncall functionName="CFGFileName"/>
    <functioncall functionName="CfgFileName"/>
    <functioncall functionName="CfgPath"/>
    <functioncall functionName="Count"/>
    <functioncall functionName="DebugMode"/>
    <functioncall functionName="FileName"/>
    <functioncall functionName="FullCfgFileName"/>
    <functioncall functionName="IC_BLUE_COLOR_TEXT"/>
    <functioncall functionName="IC_CYAN_COLOR_TEXT"/>
    <functioncall functionName="IC_GREEN_COLOR_TEXT"/>
    <functioncall functionName="IC_PURPLE_COLOR_TEXT"/>
    <functioncall functionName="IC_RED_COLOR_TEXT"/>
    <functioncall functionName="IC_WHITE_COLOR_TEXT"/>
    <functioncall functionName="IC_YELLOW_COLOR_TEXT"/>
    <functioncall functionName="MAX_PATH"/>
    <functioncall functionName="NULL"/>
    <functioncall functionName="Path"/>
    <functioncall functionName="STD_STR_LEN"/>
    <functioncall functionName="S_IXOTH"/>
    <functioncall functionName="break"/>
    <functioncall functionName="calloc"/>
    <functioncall functionName="char"/>
    <functioncall functionName="conf_path"/>
    <functioncall functionName="continue"/>
    <functioncall functionName="createCfgPath"/>
    <functioncall functionName="def"/>
    <functioncall functionName="dir_exists"/>
    <functioncall functionName="do_free"/>
    <functioncall functionName="f"/>
    <functioncall functionName="fclose"/>
    <functioncall functionName="feof"/>
    <functioncall functionName="filename"/>
    <functioncall functionName="fopen"/>
    <functioncall functionName="for"/>
    <functioncall functionName="fprintf"/>
    <functioncall functionName="free"/>
    <functioncall functionName="fscanf"/>
    <functioncall functionName="getCfgPath"/>
    <functioncall functionName="getHomePath"/>
    <functioncall functionName="home_path"/>
    <functioncall functionName="i"/>
    <functioncall functionName="if"/>
    <functioncall functionName="int"/>
    <functioncall functionName="len"/>
    <functioncall functionName="location"/>
    <functioncall functionName="log_line"/>
    <functioncall functionName="mkpath"/>
    <functioncall functionName="name"/>
    <functioncall functionName="result"/>
    <functioncall functionName="sizeof"/>
    <functioncall functionName="strcat"/>
    <functioncall functionName="strcmp"/>
    <functioncall functionName="strcpy"/>
    <functioncall functionName="strlen"/>
    <functioncall functionName="strncpy"/>
    <functioncall functionName="strparm"/>
    <functioncall functionName="while"/>
  </FileInfo>
</analyzerinfo>
